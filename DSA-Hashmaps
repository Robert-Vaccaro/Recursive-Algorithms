1. Create a HashMap class
class HashMap {
    constructor(initialCapacity=8) {
        this.length = 0;
        this._hashTable = [];
        this._capacity = initialCapacity;
        this._deleted = 0;
    }

    get(key) {
        const index = this._findSlot(key);
        if (this._hashTable[index] === undefined) {
            throw new Error('Key error');
        }
        return this._hashTable[index].value;
    }

    set(key, value){
        const loadRatio = (this.length + this._deleted + 1) / this._capacity;
        if (loadRatio > HashMap.MAX_LOAD_RATIO) {
            this._resize(this._capacity * HashMap.SIZE_RATIO);
        }
        //Find the slot where this key should be in
        const index = this._findSlot(key);

        if(!this._hashTable[index]){
            this.length++;
        }
        this._hashTable[index] = {
            key,
            value,
            DELETED: false
        }; 
    }

    delete(key) {
        const index = this._findSlot(key);
        const slot = this._hashTable[index];
        if (slot === undefined) {
            throw new Error('Key error');
        }
        slot.DELETED = true;
        this.length--;
        this._deleted++;
    }

    _findSlot(key) {
        const hash = HashMap._hashString(key);
        const start = hash % this._capacity;

        for (let i=start; i<start + this._capacity; i++) {
            const index = i % this._capacity;
            const slot = this._hashTable[index];
            if (slot === undefined || (slot.key === key && !slot.DELETED)) {
                return index;
            }
        }
    }

    _resize(size) {
        const oldSlots = this._hashTable;
        this._capacity = size;
        // Reset the length - it will get rebuilt as you add the items back
        this.length = 0;
        this._deleted = 0;
        this._hashTable = [];

        for (const slot of oldSlots) {
            if (slot !== undefined && !slot.DELETED) {
                this.set(slot.key, slot.value);
            }
        }
    }

    static _hashString(string) {
        let hash = 5381;
        for (let i = 0; i < string.length; i++) {
            //Bitwise left shift with 5 0s - this would be similar to
            //hash*31, 31 being the decent prime number
            //but bit shifting is a faster way to do this
            //tradeoff is understandability
            hash = (hash << 5) + hash + string.charCodeAt(i);
            //converting hash to a 32 bit integer
            hash = hash & hash;
        }
        //making sure has is unsigned - meaning non-negtive number. 
        return hash >>> 0;
    }
}

const main = function(){
    let obj1 = new HashMap();


    obj1.set("Hobbit", "Bilbo");
    obj1.set("Hobbit", "Frodo");
    obj1.set("Wizard", "Gandolf");
    obj1.set("Human", "Aragon");
    obj1.set("Elf", "Legolas");
    obj1.set("Maiar", "The Necromancer");
    obj1.set("Maiar", "Sauron");
    obj1.set("RingBearer", "Gollum");
    obj1.set("LadyOfLight", "Galadriel");
    obj1.set("HalfElven", "Arwen");
    obj1.set("Ent", "Treebeard");

    console.log(obj1);
}

main();

Sauron is the one that gets assigned to the Maiar key. They collide and Sauron replaces the necromancer. 
We need to use open addressing or separate chaining.


2. WhatDoesThisDo
const WhatDoesThisDo = function(){
    let str1 = 'Hello World.';
    let str2 = 'Hello World.';
    let map1 = new HashMap();
    map1.set(str1,10); // sets 10 to str1
    map1.set(str2,20);// sets 20 to str2
    let map2 = new HashMap();
    let str3 = str1;
    let str4 = str2;
    map2.set(str3,20);
    map2.set(str4,10);

    console.log(map1.get(str1));// 20
    console.log(map2.get(str3));// 10
}
Since they have the same key, the second .set() which has the value of 20, overwrites the first .set().
so when we use .get() on map1, it will always be 20.

the second .set() in map2 has the value of 10, overwrites the first .set().
so when we use .get() on map2, it will always be 10.


3. Demonstrate understanding of Hash maps
The Hash Map would collide and we would need to create linked lists for each position/key to link them to specific values.

4. Remove duplicates
Array.from(new Set(x.split(','))).toString()
var x = "Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Double,Double,Double"
x = Array.from(new Set(x.split(','))).toString();
document.write(x);



5. Any permutation a palindrome

function canRearrangeToPalindrome(str)
{
    var letterCounts = {};
    var letter;
    var palindromeSum = 0;
    for (var i = 0; i < str.length; i++) {
        letter = str[i];
        letterCounts[letter] = letterCounts[letter] || 0;
        letterCounts[letter]++;
    }
    for (var letterCount in letterCounts) {
        palindromeSum += letterCounts[letterCount] % 2;
    }

    return palindromeSum < 2;
}

console.log(canRearrangeToPalindrome("acercar"));


6. Anagram grouping
var groupAnagrams = function(strs) {
    let map = new Map();
    for (let str of strs) {
        const s = uniform(str);
        let l = map.get(s) || [];
        l.push(str);
        map.set(s, l);
    }
    return Array.from(map.values());
};

var uniform = function(str) {
    return str
        .split("")
        .sort()
        .join("");
};



7. Separate Chaining

function HashTable() {
  this._bucketSize = 23;
  this._buckets = [];
  this._buckets.length = this._bucketSize;
}

HashTable.prototype.computeHash = function (key) {
  var total = 0;
  for (var i = 0; i < key.length; i++) {
    total += key.charCodeAt(i);
  }
  return total % this._bucketsSize;
};

HashTable.prototype.put = function (key, value) {
  if (typeof(key) !== 'number' && typeof(key) !== 'string') {
    throw 'Invalid key type';
  }
  
  var hash = this.computeHash(key);
  if (this._buckets[hash] === undefined) {
    this._buckets[hash] = {};
  }
  
  var chain = this._buckets[hash];
  if (chain.hasOwnProperty(key)) {
    throw 'Duplicates not allowed';
  }
  chain[key] = value;
};

HashTable.prototype.get = function (key) {
  if (typeof(key) !== 'number' && typeof(key) !== 'string') {
    return undefined;
  }
  
  var hash = this.computeHash(key);
  if (this._buckets[hash] === undefined) {
    return undefined;
  }
  
  var chain = this._buckets[hash];
  if (chain.hasOwnProperty(key)) {
    return chain[key];
  }
  
  return undefined;
};
