class _Node {
    constructor(value, next) {
        this.value = value;
        this.next = next;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
    }

    insertFirst(item) {
        this.head = new _Node(item, this.head);
    }

    insertLast(item) {
        if (this.head === null) {
            this.insertFirst(item);
        } else {
            let tempNode = this.head;
            while (tempNode.next !== null) {
                tempNode = tempNode.next;
            }
            tempNode.next = new _Node(item, null);
        }
    }

    find(item) {
        // Start at the head
        let currNode = this.head;
        // If the list is empty
        if (!this.head) {
            return null;
        }
        // Check for the item 
        while (currNode.value !== item) {
            /* Return null if it's the end of the list 
               and the item is not on the list */
            if (currNode.next === null) {
                return null;
            } else {
                // Otherwise, keep looking 
                currNode = currNode.next;
            }
        }
        // Found it
        return currNode;
    }

    remove(item) {
        // If the list is empty
        if (!this.head) {
            return null;
        }
        // If the node to be removed is head, make the next node head
        if (this.head.value === item) {
            this.head = this.head.next;
            return;
        }
        // Start at the head
        let currNode = this.head;
        // Keep track of previous
        let previousNode = this.head;

        while ((currNode !== null) && (currNode.value !== item)) {
            // Save the previous node 
            previousNode = currNode;
            currNode = currNode.next;
        }
        if (currNode === null) {
            console.log('Item not found');
            return;
        }
        previousNode.next = currNode.next;
    }
    indexOf(item) 
{ 
    var count = 0; 
    var current = this.head; 
  
    // iterae over the list 
    while (current != null) { 
        // compare each item of the list 
        // with given item
        if (current.item == = item) 
            return count; 
        count++; 
        current = current.next; 
    } 
  
    // not found 
    return -1; 
} 
}

// checks the list for empty 
isEmpty() 
{ 
	return this.length == 0; 
} 

// gives the size of the list 
sizeOfList() 
{ 
	console.log(this.length); 
} 
// prints the list items 
display() 
{ 
	var curr = this.head; 
	var str = ""; 
	while (curr) { 
		str += curr.element + " "; 
		curr = curr.next; 
	} 
	console.log(str); 
} 



const list = new LinkedList('first')
  .insertFirst("Apollo")
  .insertFirst("Boomer")
  .insertFirst("Helo")
  .insertFirst("Husker")
  .insertFirst("Starbuck")
  .insertFirst("Tauhida")
  .remove("squirrel")
  .remove("Tauhida");

Mystery program
Logarithmic - 3 seconds



Reverse Linked List

function reverse(head) {
  let node = head,
      previous,
      tmp;

  while (node) {
    // save next before we overwrite node.next!
    tmp = node.next;

    // reverse pointer
    node.next = previous;

    // step forward in the list
    previous = node;
    node = tmp;
  }

  return previous;
}


3rd from the end

class LinkedList { 
    Node head; // head of the list 
  
    /* Linked List node */
    class Node { 
        int data; 
        Node next; 
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
  
    /* Function to get the nth node from the last of a 
       linked list */
    function printNthFromLast(int n) 
    { 
        int len = 0; 
        Node temp = head; 
  
        // 1) count the number of nodes in Linked List 
        while (temp != null) { 
            temp = temp.next; 
            len++; 
        } 
  
        // check if value of n is not more than length of 
        // the linked list 
        if (len < n) 
            return; 
  
        temp = head; 
  
        // 2) get the (len-n+1)th node from the beginning 
        for (int i = 1; i < len - n + 1; i++) 
            temp = temp.next; 
  
        System.out.println(temp.data); 
    } 
  
    /* Inserts a new Node at front of the list. */
    function push(int new_data) 
    { 
        /* 1 & 2: Allocate the Node & 
                  Put in the data*/
        Node new_node = new Node(new_data); 
  
        /* 3. Make next of new Node as head */
        new_node.next = head; 
  
        /* 4. Move the head to point to new Node */
        head = new_node; 
    } 
  
    /*Drier program to test above methods */
    function main(String[] args) 
    { 
        LinkedList llist = new LinkedList(); 
        llist.push(20); 
        llist.push(4); 
        llist.push(15); 
        llist.push(35); 
  
        llist.printNthFromLast(3); 
    } 
}


Middle of the List

function Node(data, next) {
  this.data = data;
  this.next = next;
}    


var n1 = new Node("Hello", null);   
var n2 = new Node("21", n1); 
var n3 = new Node("Green", n2); 
var n4 = new Node("Blue", n3); 
var n5 = new Node("Daniel", n4); 


var head = n5; 

var fastPointer = head;
var slowPointer = head;

while (fastPointer.next !== null && fastPointer.next.next !== null) {
  fastPointer = fastPointer.next.next;   
  slowPointer = slowPointer.next;
}

slowPointer.data        


Has Cycle:

function SLLNode(elem) {
    this.value=elem;
    this.next=null;
}

var hasCycle=function(node){

    var track=node;
    //traverse thru list till next node is either null or back to first node
    while(track.next!==null && track.next!==this.head){
        track=track.next;
    }
    if(track.next === null){ //if next node null then no cycle
        return false;
    }
    if(track.next===this.head){ //if next node head then there is cycle
        return true;
    }
}

var my_node1=new SLLNode(3);
var my_node2=new SLLNode(5);
var my_node3=new SLLNode(19);

//assigning head
var head=my_node1;

//connecting linked list
my_node1.next=my_node2;
my_node2.next=my_node3;
my_node3.next=my_node1; //cycle
console.log("Has cycle?: "+hasCycle(my_node1)); //outputs true as expected

var node1=new SLLNode(3);
var node2=new SLLNode(5);
var node3=new SLLNode(19);

//assigning head
var head1=node1;
node1.next=node2;
node2.next=node3;
console.log("Has cycle?: "+hasCycle(node1)); //outputs false as expected



Sort a Linked List

  
// Create Node of LinkedList 
function Node(data) { 
        this.node = data; 
        this.next = null; 
} 
  
// To initialize a linkedlist 
function LinkedList(list) { 
    this.head = list || null
} 
  
// Function to insert The new Node into the linkedList 
LinkedList.prototype.insert = function(data) { 
  
          // Check if the linked list is empty 
          // so insert first node and lead head 
          // points to generic node 
          if (this.head === null) 
              this.head = new Node(data); 
  
          else { 
  
              // If linked list is not empty, insert the node 
              // at the end of the linked list 
              let list = this.head; 
              while (list.next) { 
                  list = list.next; 
              } 
  
              // Now here list pointer points to last 
              // node let’s insert out new node in it 
              list.next = new Node(data) 
          } 
} 
  
// Function to print linkedList 
LinkedList.prototype.iterate = function() { 
  
          // First we will check whether out 
          // linked list is empty or node 
          if (this.head === null) 
              return null; 
  
          // If linked list is not empty we will 
          // iterate from each Node and prints 
          // it’s value store in “data” property 
  
          let list = this.head; 
  
          // we will iterate until our list variable 
          // contains the “Next” value of the last Node 
          // i.e-> null 
          while (list) { 
              document.write(list.node)  
              if (list.next) 
                  document.write(' -> ') 
              list = list.next 
          } 
} 
  
// Function to mergesort a linked list 
LinkedList.prototype.mergeSort = function(list) { 
  
          if (list.next === null) 
              return list; 
  
          let count = 0; 
          let countList = list 
          let leftPart = list; 
          let leftPointer = list; 
          let rightPart = null; 
          let rightPointer = null; 
  
          // Counting the nodes in the received linkedlist 
          while (countList.next !== null) { 
              count++; 
              countList = countList.next; 
          } 
  
          // counting the mid of the linked list 
          let mid = Math.floor(count / 2) 
          let count2 = 0; 
  
          // separating the left and right part with 
          // respect to mid node in tke linked list 
          while (count2 < mid) { 
              count2++; 
              leftPointer = leftPointer.next; 
          } 
  
          rightPart = new LinkedList(leftPointer.next); 
          leftPointer.next = null; 
  
          // Here are two linked list which 
          // contains the left most nodes and right 
          // most nodes of the mid node 
          return this._mergeSort(this.mergeSort(leftPart), 
                                 this.mergeSort(rightPart.head)) 
} 
  
// Merging both lists in sorted manner 
LinkedList.prototype._mergeSort = function(left, right) { 
  
          // Create a new empty linked list 
          let result = new LinkedList() 
  
          let resultPointer = result.head; 
          let pointerLeft = left; 
          let pointerRight = right; 
    
            
          // If true then add left most node value in result, 
          // increment left pointer else do the same in 
          // right linked list. 
          // This loop will be executed until pointer's of 
         // a left node or right node reached null 
          while (pointerLeft && pointerRight) { 
              let tempNode = null; 
  
             // Check if the right node's value is greater than 
             // left node's value 
              if (pointerLeft.node > pointerRight.node) { 
                  tempNode = pointerRight.node 
                  pointerRight = pointerRight.next; 
              } 
              else { 
                  tempNode = pointerLeft.node 
                  pointerLeft = pointerLeft.next; 
              } 
  
              if (result.head == null) { 
                  result.head = new Node(tempNode) 
                  resultPointer = result.head 
              } 
              else { 
                  resultPointer.next = new Node(tempNode) 
                  resultPointer = resultPointer.next 
              } 
          } 
  
          // Add the remaining elements in the last of resultant 
          // linked list 
          resultPointer.next = pointerLeft; 
          while (resultPointer.next) 
              resultPointer = resultPointer.next 
  
              resultPointer.next = pointerRight 
  
          // Result is  the new sorted linked list 
           return result.head; 
} 
  
// Initialize the object 
let l = new LinkedList(); 
l.insert(10) 
l.insert(20) 
l.insert(3) 
l.insert(2) 
l.insert(1) 
// Print the linked list 
l.iterate() 
  
// Sort the linked list 
l.head = LinkedList.prototype.mergeSort(l.head) 
  
document.write('<br> After sorting : '); 
  
// Print the sorted linked list 
l.iterate() 
